import { Scope, ScopeAll, Scopes, Path, Value, Data, DataRaw, Schema, ExtendData, Disposer, ChangeHandler, ChangeHandlerData, Options, Provider, Filterer, FiltererWrapper } from './types';
declare class Configuration {
    providers: Provider[];
    scopes: Scopes;
    defaults: Provider;
    isArray: boolean;
    schema?: Schema;
    filtererRaw: Filterer;
    filterer: FiltererWrapper;
    scope: Scope;
    dataSchema: Data;
    handlers: ChangeHandlerData[];
    constructor(options: Partial<Options> & Pick<Options, 'filterer'>);
    _getTargetScopeForPath(path: Path): Scope;
    init(): void;
    dispose(): void;
    extend(namespace: string, data: ExtendData): Disposer;
    refresh(): void;
    get(): Data;
    get(scope: ScopeAll): Record<Scope, Data>;
    get(scope: ScopeAll, path: Path): Record<Scope, Value | undefined>;
    get(scope: Scope, path: Path): Value | undefined;
    get(path: Path): Value | undefined;
    has(scope: ScopeAll): Record<Scope, boolean>;
    has(scope: ScopeAll, path: Path): Record<Scope, boolean>;
    has(scope: Scope, path: Path): boolean;
    has(path: Path): boolean;
    set(scope: ScopeAll, path: Path, value: Value): void;
    set(scope: Scope, path: Path, value: Value): void;
    set(path: Path, value: Value): void;
    remove(scope: ScopeAll, path: Path): void;
    remove(scope: Scope, path: Path): void;
    remove(path: Path): void;
    update(scope: ScopeAll, data: Data | DataRaw): void;
    update(scope: Scope, data: Data | DataRaw): void;
    update(data: Data | DataRaw): void;
    reset(): void;
    reset(scope: Scope): void;
    triggerChange(): void;
    onChange(handler: ChangeHandler): Disposer;
    onChange(scope: ScopeAll, handler: ChangeHandler): Disposer;
    onChange(scope: ScopeAll, path: Path, handler: ChangeHandler): Disposer;
    onChange(scope: Scope, path: Path, handler: ChangeHandler): Disposer;
    onChange(path: Path, handler: ChangeHandler): Disposer;
}
declare const _default: typeof Configuration & {
    default: typeof Configuration;
}
declare namespace _default {
    export type type = Configuration;
}
export = _default;
