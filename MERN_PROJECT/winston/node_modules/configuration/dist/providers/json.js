"use strict";
/* IMPORT */
Object.defineProperty(exports, "__esModule", { value: true });
const plain_object_clone_1 = require("plain-object-clone");
const path_prop_1 = require("path-prop");
const file_1 = require("../utils/file");
const file_2 = require("./file");
/* JSON */
//TODO: preserve the existing path keys instead of modifying them
class ProviderJSON extends file_2.default {
    async read() {
        var _a, _b;
        if (!this.path)
            return super.read();
        try {
            const dataRaw = (_a = await file_1.default.read(this.path, { encoding: 'utf8' })) !== null && _a !== void 0 ? _a : this.defaultsRaw, data = path_prop_1.default.unflat((_b = this.dataParser.parse(dataRaw)) !== null && _b !== void 0 ? _b : this.defaults);
            return { data, dataRaw };
        }
        catch (_c) {
            return {
                data: plain_object_clone_1.default(this.defaults),
                dataRaw: this.defaultsRaw
            };
        }
    }
    readSync() {
        var _a, _b;
        if (!this.path)
            return super.readSync();
        try {
            const dataRaw = (_a = file_1.default.readSync(this.path, { encoding: 'utf8' })) !== null && _a !== void 0 ? _a : this.defaultsRaw, data = path_prop_1.default.unflat((_b = this.dataParser.parse(dataRaw)) !== null && _b !== void 0 ? _b : this.defaults);
            return { data, dataRaw };
        }
        catch (_c) {
            return {
                data: plain_object_clone_1.default(this.defaults),
                dataRaw: this.defaultsRaw
            };
        }
    }
    async write(data, force = false) {
        if (!this.path)
            return super.write(data, force);
        if (!force && this.isEqual(data))
            return;
        await super.write(data, true);
        file_1.default.write(this.path, this.dataRaw, this.writeOptions);
    }
    writeSync(data, force = false) {
        if (!this.path)
            return super.writeSync(data, force);
        if (!force && this.isEqual(data))
            return;
        super.writeSync(data, true);
        file_1.default.writeSync(this.path, this.dataRaw, this.writeSyncOptions);
    }
}
/* EXPORT */
exports.default = ProviderJSON;
