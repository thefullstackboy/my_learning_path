import { Disposer, Data, DataRaw, DataUpdate, DataParser, ProviderChangeHandler, ProviderAbstractOptions } from '../types';
declare abstract class ProviderAbstract<Options extends ProviderAbstractOptions = ProviderAbstractOptions> {
    scope: string;
    data: Data;
    dataRaw: DataRaw;
    dataSchema: Data;
    dataParser: DataParser;
    defaults: Data;
    defaultsRaw: DataRaw;
    handlers: ProviderChangeHandler[];
    constructor(options?: Partial<Options>);
    init(): void;
    dispose(): void;
    filterer(data: Data): Data;
    isEqual(data: Data | DataRaw): boolean;
    triggerChange(): void;
    onChange(handler: ProviderChangeHandler): Disposer;
    abstract read(): Promise<DataUpdate>;
    abstract readSync(): DataUpdate;
    abstract write(data: Data | DataRaw, force?: boolean): Promise<void>;
    abstract writeSync(data: Data | DataRaw, force?: boolean): void;
}
export default ProviderAbstract;
