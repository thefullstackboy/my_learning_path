"use strict";
/* IMPORT */
Object.defineProperty(exports, "__esModule", { value: true });
const plain_object_is_equal_1 = require("plain-object-is-equal");
const path_prop_1 = require("path-prop");
const config_1 = require("../config");
const parser_1 = require("../utils/parser");
const type_1 = require("../utils/type");
/* ABSTRACT */
class ProviderAbstract {
    constructor(options) {
        var _a, _b, _c, _d, _e;
        if ((options === null || options === void 0 ? void 0 : options.scope) === config_1.SCOPE_ALL)
            throw new Error(`"${config_1.SCOPE_ALL}" is not a valid scope name for a provider`);
        this.scope = (_a = options === null || options === void 0 ? void 0 : options.scope) !== null && _a !== void 0 ? _a : config_1.DEFAULTS.scope;
        this.dataParser = (_b = options === null || options === void 0 ? void 0 : options.parser) !== null && _b !== void 0 ? _b : new parser_1.default((_c = options === null || options === void 0 ? void 0 : options.indentation) !== null && _c !== void 0 ? _c : config_1.DEFAULTS.indentation);
        this.defaultsRaw = (_d = options === null || options === void 0 ? void 0 : options.defaultsRaw) !== null && _d !== void 0 ? _d : config_1.DEFAULTS.defaultsRaw;
        this.defaults = path_prop_1.default.unflat((_e = options === null || options === void 0 ? void 0 : options.defaults) !== null && _e !== void 0 ? _e : (this.dataParser.parse(this.defaultsRaw) || config_1.DEFAULTS.defaults));
        this.handlers = [];
        this.init();
    }
    init() {
        const { data, dataRaw } = this.readSync();
        this.data = data;
        this.dataRaw = dataRaw;
        this.dataSchema = this.filterer(this.data);
    }
    dispose() { }
    filterer(data) {
        return data;
    }
    isEqual(data) {
        return type_1.default.isString(data) ? data === this.dataRaw : plain_object_is_equal_1.default(data, this.data);
    }
    triggerChange() {
        this.handlers.forEach(handler => handler());
    }
    onChange(handler) {
        this.handlers.push(handler);
        return () => {
            this.handlers.splice(this.handlers.indexOf(handler), 1);
        };
    }
}
/* EXPORT */
exports.default = ProviderAbstract;
