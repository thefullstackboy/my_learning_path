"use strict";
/* IMPORT */
Object.defineProperty(exports, "__esModule", { value: true });
const jsonc_simple_parser_1 = require("jsonc-simple-parser");
const type_1 = require("./type");
/* PARSER */
class Parser {
    constructor(indentation) {
        this.indentation = indentation;
    }
    parse(raw) {
        try {
            const data = jsonc_simple_parser_1.default.parse(raw);
            if (type_1.default.isObject(data))
                return data;
        }
        catch (_a) { }
    }
    stringify(data, dataRawPrev) {
        const getContent = (data) => {
            if (type_1.default.isArray(data)) {
                //TODO: Publish the following code as 2 separate packages
                const lines = data.map(item => jsonc_simple_parser_1.default.stringify(item, undefined, ' ')
                    .replace(/\[\s*?(?:\r?\n|\r)\s*/g, '[')
                    .replace(/\s*?(?:\r?\n|\r)\s*]/g, ']')
                    .replace(/{\s*?(?:\r?\n|\r)\s*/g, '{ ')
                    .replace(/\s*?(?:\r?\n|\r)\s*}/g, ' }')
                    .replace(/,\s*?(?:\r?\n|\r)\s*/g, ', '));
                const indentation = type_1.default.isString(this.indentation) ? this.indentation : ' '.repeat(this.indentation || 0);
                return `[\n${indentation}${lines.join(`,\n${indentation}`)}\n]`;
            }
            else {
                return jsonc_simple_parser_1.default.stringify(data, undefined, this.indentation);
            }
        };
        const getBackup = (dataRaw) => {
            if (!dataRaw)
                return '';
            const isValid = jsonc_simple_parser_1.default.validate(dataRaw);
            if (isValid)
                return '';
            const timestamp = new Date().toLocaleString(), header = `// BACKUP (${timestamp})`, comments = dataRaw.trim().replace(/^/gm, '// '), backup = `\n\n${header}\n${comments}`;
            return backup;
        };
        try {
            const content = getContent(data), backup = getBackup(dataRawPrev);
            return `${content}${backup}`;
        }
        catch (_a) { }
    }
}
;
/* EXPORT */
exports.default = Parser;
